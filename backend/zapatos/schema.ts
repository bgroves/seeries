/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v0.1.60), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

import * as db from './src/core';

type BasicWhereableFromInsertable<T> = { [K in keyof T]: Exclude<T[K] | db.ParentColumn, null | db.DefaultType> };
type WhereableFromBasicWhereable<T> = { [K in keyof T]?: T[K] | db.SQLFragment<any, T[K]> };
type WhereableFromInsertable<T> = WhereableFromBasicWhereable<BasicWhereableFromInsertable<T>>;

/* === schema: public === */

/* --- enums --- */


/* --- tables --- */

export declare namespace celsius {
  export type Table = 'celsius';
  export interface Selectable {
    time: Date | null;
    device_id: number | null;
    celsius: number | null;
  }
  export interface Insertable {
    time?: Date | db.Parameter<Date> | db.DateString | null | db.DefaultType | db.SQLFragment;
    device_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    celsius?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export interface Whereable extends WhereableFromInsertable<Insertable> { }
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | db.DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | db.DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = never;
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
  export type SQL = SQLExpression | SQLExpression[];
}

export declare namespace device {
  export type Table = 'device';
  export interface Selectable {
    id: number;
    type: string;
    name: string;
  }
  export interface Insertable {
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    type: string | db.Parameter<string> | db.SQLFragment;
    name: string | db.Parameter<string> | db.SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export interface Whereable extends WhereableFromInsertable<Insertable> { }
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | db.DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | db.DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'device_pkey' | 'device_name_key';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
  export type SQL = SQLExpression | SQLExpression[];
}

export declare namespace sensorpush {
  export type Table = 'sensorpush';
  export interface Selectable {
    time: Date;
    device_id: number;
    celsius: number;
    relative_humidity: number;
  }
  export interface Insertable {
    time: Date | db.Parameter<Date> | db.DateString | db.SQLFragment;
    device_id: number | db.Parameter<number> | db.SQLFragment;
    celsius: number | db.Parameter<number> | db.SQLFragment;
    relative_humidity: number | db.Parameter<number> | db.SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export interface Whereable extends WhereableFromInsertable<Insertable> { }
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | db.DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | db.DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = never;
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
  export type SQL = SQLExpression | SQLExpression[];
}

export declare namespace tempest {
  export type Table = 'tempest';
  export interface Selectable {
    time: Date;
    device_id: number;
    wind_lull: number | null;
    wind_avg: number | null;
    wind_gust: number | null;
    wind_direction: number | null;
    wind_sample_interval: number | null;
    pressure: number | null;
    celsius: number | null;
    relative_humidity: number | null;
    illuminance: number | null;
    uv: number | null;
    solar_radiation: number | null;
    rain_accumulation: number | null;
    precipitation_type: number | null;
    average_strike_distance: number | null;
    strike_count: number | null;
    battery: number | null;
    report_interval: number | null;
    local_day_rain_accumulation: number | null;
    rain_accumulation_final: number | null;
    local_day_rain_accumulation_final: number | null;
    precipitation_analysis_type: number | null;
  }
  export interface Insertable {
    time: Date | db.Parameter<Date> | db.DateString | db.SQLFragment;
    device_id: number | db.Parameter<number> | db.SQLFragment;
    wind_lull?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    wind_avg?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    wind_gust?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    wind_direction?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    wind_sample_interval?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    pressure?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    celsius?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    relative_humidity?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    illuminance?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    uv?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    solar_radiation?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    rain_accumulation?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    precipitation_type?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    average_strike_distance?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    strike_count?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    battery?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    report_interval?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    local_day_rain_accumulation?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    rain_accumulation_final?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    local_day_rain_accumulation_final?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    precipitation_analysis_type?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export interface Whereable extends WhereableFromInsertable<Insertable> { }
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | db.DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | db.DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = never;
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
  export type SQL = SQLExpression | SQLExpression[];
}

/* === cross-table types === */

export type Table = celsius.Table | device.Table | sensorpush.Table | tempest.Table;
export type Selectable = celsius.Selectable | device.Selectable | sensorpush.Selectable | tempest.Selectable;
export type Whereable = celsius.Whereable | device.Whereable | sensorpush.Whereable | tempest.Whereable;
export type Insertable = celsius.Insertable | device.Insertable | sensorpush.Insertable | tempest.Insertable;
export type Updatable = celsius.Updatable | device.Updatable | sensorpush.Updatable | tempest.Updatable;
export type UniqueIndex = celsius.UniqueIndex | device.UniqueIndex | sensorpush.UniqueIndex | tempest.UniqueIndex;
export type Column = celsius.Column | device.Column | sensorpush.Column | tempest.Column;
export type AllTables = [celsius.Table, device.Table, sensorpush.Table, tempest.Table];


export type SelectableForTable<T extends Table> = {
  celsius: celsius.Selectable;
  device: device.Selectable;
  sensorpush: sensorpush.Selectable;
  tempest: tempest.Selectable;
}[T];

export type WhereableForTable<T extends Table> = {
  celsius: celsius.Whereable;
  device: device.Whereable;
  sensorpush: sensorpush.Whereable;
  tempest: tempest.Whereable;
}[T];

export type InsertableForTable<T extends Table> = {
  celsius: celsius.Insertable;
  device: device.Insertable;
  sensorpush: sensorpush.Insertable;
  tempest: tempest.Insertable;
}[T];

export type UpdatableForTable<T extends Table> = {
  celsius: celsius.Updatable;
  device: device.Updatable;
  sensorpush: sensorpush.Updatable;
  tempest: tempest.Updatable;
}[T];

export type UniqueIndexForTable<T extends Table> = {
  celsius: celsius.UniqueIndex;
  device: device.UniqueIndex;
  sensorpush: sensorpush.UniqueIndex;
  tempest: tempest.UniqueIndex;
}[T];

export type ColumnForTable<T extends Table> = {
  celsius: celsius.Column;
  device: device.Column;
  sensorpush: sensorpush.Column;
  tempest: tempest.Column;
}[T];

export type SQLForTable<T extends Table> = {
  celsius: celsius.SQL;
  device: device.SQL;
  sensorpush: sensorpush.SQL;
  tempest: tempest.SQL;
}[T];

